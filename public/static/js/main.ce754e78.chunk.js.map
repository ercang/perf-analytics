{"version":3,"sources":["helpers/PostHelper.js","helpers/DashboardConnector.js","components/SiteAddForm.js","components/SiteListContainer.js","components/ReportLineChart.js","components/SiteReport.js","components/App.js","serviceWorker.js","index.js"],"names":["a","url","data","bodyData","headersObject","JSON","stringify","options","method","mode","cache","credentials","redirect","referrer","body","headers","fetch","response","json","getData","this","sites","siteUpdateCallback","siteReport","siteReportCallback","requestSites","siteName","postData","name","then","sitesResponse","forEach","cb","callback","push","uuid","console","log","reportResponse","SiteAddForm","props","state","value","handleChange","bind","onAddWebsiteClicked","event","setState","target","DashboardConnector","addWebSite","type","onChange","placeholder","onClick","React","Component","SiteList","map","site","key","href","loadReport","SiteListContainer","ReportLineChart","reportData","report","item","performanceData","reportKey","style","width","float","labels","datasets","label","SiteReport","App","onSitesUpdated","onSiteReportUpdated","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+SAAO,kDAAAA,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GACxCC,EAAW,KACXC,EAAgB,KAEpBA,EAAgB,CACZ,eAAgB,oBAGpBD,EAAWE,KAAKC,UAAUJ,GAEtBK,EAAU,CACVC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,SAAU,SACVC,SAAU,cACVC,KAAMX,GAGNC,IACAG,EAAQQ,QAAUX,GAIR,sBAKdH,EAHc,GAGEA,EA9Bb,UAgCoBe,MAAMf,EAAKM,GAhC/B,eAgCGU,EAhCH,iBAiCUA,EAASC,OAjCnB,sF,sBAoCA,SAAeC,IAAtB,+B,4CAAO,0CAAAnB,EAAA,6DAAuBC,EAAvB,+BAA6B,GAElB,sBAKdA,EAHc,GAGEA,EAPb,SASoBe,MAAMf,GAT1B,cASGgB,EATH,gBAUUA,EAASC,OAVnB,qF,0BCcQ,M,WA/Cb,aAAe,oBACbE,KAAKC,MAAQ,GACbD,KAAKE,mBAAqB,GAE1BF,KAAKG,WAAa,GAClBH,KAAKI,mBAAqB,GAE1BJ,KAAKK,e,uDAGIC,GAAW,IAAD,QDbhB,WAAP,gCCcIC,CAAS,QAAS,CAAEC,KAAMF,IAAYG,KAAtC,sBAA2C,sBAAA7B,EAAA,sDACzC,EAAKyB,eADoC,8C,4KAMfN,EAAQ,S,OAA9BW,E,OACNV,KAAKC,MAAQS,EAAcT,MAC3BD,KAAKE,mBAAmBS,SAAQ,SAAAC,GAC9BA,EAAG,EAAKX,U,uIAKV,OAAOD,KAAKC,Q,qCAGCY,GACbb,KAAKE,mBAAmBY,KAAKD,K,0EAGdE,G,qFACfC,QAAQC,IAAI,aAAcF,G,SACGhB,EAAQ,WAAagB,G,OAA5CG,E,OACNF,QAAQC,IAAIC,EAAepC,MAC3BkB,KAAKG,WAAae,EAAepC,KACjCkB,KAAKI,mBAAmBO,SAAQ,SAAAC,GAC9BA,EAAG,EAAKT,e,iJAIQU,GAClBb,KAAKI,mBAAmBU,KAAKD,O,MC3CZM,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBALV,E,yDAQNE,GACX1B,KAAK2B,SAAS,CAAEL,MAAOI,EAAME,OAAON,U,0CAGlBI,GAClBG,EAAmBC,WAAW9B,KAAKqB,MAAMC,S,+BAIzC,OACE,6BACE,2BAAOS,KAAK,OAAOT,MAAOtB,KAAKqB,MAAMC,MAAOU,SAAUhC,KAAKuB,aAAcU,YAAY,uBACrF,4BAAQC,QAASlC,KAAKyB,qBAAtB,qB,GArBiCU,IAAMC,WCE/C,SAASC,EAASjB,GAKhB,OAJcA,EAAMnB,MAAQmB,EAAMnB,MAAQ,IAClBqC,KAAI,SAACC,GAAD,OAC1B,yBAAKC,IAAKD,EAAKxB,MAAf,IAAuBwB,EAAKxB,KAA5B,KAAoCwB,EAAK/B,KAAzC,MAAiD,uBAAGiC,KAAK,IAAIP,QAAS,WAAKL,EAAmBa,WAAWH,EAAKxB,QAA7D,mBAetC4B,MAVf,SAA2BvB,GACzB,OACE,6BACE,gDACA,kBAACiB,EAAD,CAAUpC,MAAOmB,EAAMnB,QACvB,kBAAC,EAAD,Q,QCLW2C,MATjB,SAAyBxB,GACrB,IAAMyB,EAAazB,EAAM0B,OAAOR,KAAI,SAAAS,GAAI,OAAIA,EAAKC,gBAAgB5B,EAAM6B,cACvE,OACI,yBAAKC,MAAO,CAACC,MAAO,MAAOC,MAAO,SAC9B,kBAAC,OAAD,CAAMtE,KAAO,CAACuE,OAAQ,CAACjC,EAAM6B,WAAYK,SAAU,CAAC,CAACxE,KAAM+D,EAAYU,MAAOnC,EAAM6B,iBCOjFO,MAZf,SAAoBpC,GAClB,OACE,6BACE,sCACA,kBAAC,EAAD,CAAiB6B,UAAW,OAAQH,OAAQ1B,EAAM0B,SAClD,kBAAC,EAAD,CAAiBG,UAAW,MAAOH,OAAQ1B,EAAM0B,SACjD,kBAAC,EAAD,CAAiBG,UAAW,cAAeH,OAAQ1B,EAAM0B,SACzD,kBAAC,EAAD,CAAiBG,UAAW,iBAAkBH,OAAQ1B,EAAM0B,WCJ7CW,E,kDACnB,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACpB,MAAO,GAAI6C,OAAQ,IAEjCjB,EAAmB6B,gBAAe,SAACzD,GACjC,EAAK0B,SAAS,CAAE1B,QAAO6C,OAAQ,EAAKzB,MAAMyB,YAG5CjB,EAAmB8B,qBAAoB,SAACb,GACtC,EAAKnB,SAAS,CAAE1B,MAAO,EAAKoB,MAAMpB,MAAO6C,cAT1B,E,yDAaNpB,GACX1B,KAAK2B,SAAS,CAAEL,MAAOI,EAAME,OAAON,U,+BAIpC,OACE,yBAAKsC,UAAU,OACb,yDACA,kBAAC,EAAD,CAAmB3D,MAAOD,KAAKqB,MAAMpB,QACrC,kBAAC,EAAD,CAAY6C,OAAQ9C,KAAKqB,MAAMyB,c,GAvBNX,IAAMC,WCMnByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,a","file":"static/js/main.ce754e78.chunk.js","sourcesContent":["export async function postData(url = '', data = {}) {\n    let bodyData = null;\n    let headersObject = null;\n\n    headersObject = {\n        'Content-Type': 'application/json',\n    };\n\n    bodyData = JSON.stringify(data);\n\n    let options = {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        redirect: 'follow',\n        referrer: 'no-referrer',\n        body: bodyData\n    };\n\n    if (headersObject) {\n        options.headers = headersObject;\n    }\n\n    // Default options are marked with *\n    let baseUrl = 'http://localhost:80';\n    if (process.env.NODE_ENV === 'production') {\n        baseUrl = '';\n    }\n\n    url = baseUrl + url;\n\n    const response = await fetch(url, options);\n    return await response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport async function getData(url = '') {\n    // Default options are marked with *\n    let baseUrl = 'http://localhost:80';\n    if (process.env.NODE_ENV === 'production') {\n        baseUrl = '';\n    }\n\n    url = baseUrl + url;\n\n    const response = await fetch(url);\n    return await response.json(); // parses JSON response into native JavaScript objects\n}","import { postData, getData } from './PostHelper'\n\nclass DashboardConnector {\n  constructor() {\n    this.sites = [];\n    this.siteUpdateCallback = [];\n\n    this.siteReport = [];\n    this.siteReportCallback = [];\n\n    this.requestSites();\n\n  }\n  addWebSite(siteName) {\n    postData('/site', { name: siteName }).then(async () => {\n      this.requestSites();\n    })\n  }\n\n  async requestSites() {\n    const sitesResponse = await getData('/site');\n    this.sites = sitesResponse.sites;\n    this.siteUpdateCallback.forEach(cb => {\n      cb(this.sites);\n    });\n  }\n\n  getSites() {\n    return this.sites;\n  }\n\n  onSitesUpdated(callback) {\n    this.siteUpdateCallback.push(callback);\n  }\n\n  async loadReport(uuid) {\n    console.log(\"loadReport\", uuid);\n    const reportResponse = await getData('/report/' + uuid);\n    console.log(reportResponse.data)\n    this.siteReport = reportResponse.data;\n    this.siteReportCallback.forEach(cb => {\n      cb(this.siteReport);\n    });\n  }\n\n  onSiteReportUpdated(callback) {\n    this.siteReportCallback.push(callback);\n  }\n}\n\nexport default new DashboardConnector();\n","import React from 'react';\nimport DashboardConnector from '../helpers/DashboardConnector'\n\nexport default class SiteAddForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onAddWebsiteClicked = this.onAddWebsiteClicked.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  onAddWebsiteClicked(event) {\n    DashboardConnector.addWebSite(this.state.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Enter Website Name\" />\n        <button onClick={this.onAddWebsiteClicked}>Add Web Site</button>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport SiteAddForm from './SiteAddForm';\n\nimport DashboardConnector from '../helpers/DashboardConnector'\n\nfunction SiteList(props) {\n  const sites = props.sites ? props.sites : [];\n  const listItems = sites.map((site) =>\n    <div key={site.uuid}>[{site.uuid}] {site.name} - <a href=\"#\" onClick={()=>{DashboardConnector.loadReport(site.uuid)}}>[Show Data]</a></div>\n  );\n  return (listItems);\n}\n\nfunction SiteListContainer(props) {\n  return (\n    <div>\n      <h2>List Of WebSites</h2>\n      <SiteList sites={props.sites} />\n      <SiteAddForm />\n    </div>\n  );\n}\n\nexport default SiteListContainer;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './App.css';\n\nfunction ReportLineChart(props) {\n    const reportData = props.report.map(item => item.performanceData[props.reportKey]);\n    return (\n        <div style={{width: '45%', float: 'left'}}>\n            <Line data={ {labels: [props.reportKey], datasets: [{data: reportData, label: props.reportKey},] } } />\n        </div>\n    );\n  }\n  \n  export default ReportLineChart;\n  ","import React from 'react';\nimport ReportLineChart from './ReportLineChart'\n\nfunction SiteReport(props) {\n  return (\n    <div>\n      <h2>Report</h2>\n      <ReportLineChart reportKey={\"ttfb\"} report={props.report}/>\n      <ReportLineChart reportKey={\"fcp\"} report={props.report}/>\n      <ReportLineChart reportKey={\"domLoadTime\"} report={props.report}/>\n      <ReportLineChart reportKey={\"windowLoadTime\"} report={props.report}/>\n    </div>\n  );\n}\n\nexport default SiteReport;\n","import React from 'react';\nimport './App.css';\nimport SiteListContainer from './SiteListContainer'\nimport SiteReport from './SiteReport'\nimport DashboardConnector from '../helpers/DashboardConnector'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {sites: [], report: []};\n\n    DashboardConnector.onSitesUpdated((sites)=>{\n      this.setState({ sites, report: this.state.report });\n    });\n\n    DashboardConnector.onSiteReportUpdated((report)=>{\n      this.setState({ sites: this.state.sites, report });\n    });\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>PerfAnalytics - Dashboard</h1>\n        <SiteListContainer sites={this.state.sites} />\n        <SiteReport report={this.state.report}/>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}